#!/usr/bin/env node

"use strict";

var http = require('http');
var httpProxy = require('./network_simulation/lib/proxy');
var checkServer = require('./network_simulation/lib/check_server');
var nopt = require('nopt');
var url = require('url');

var RequestData = function (request, response, buffer) {
  this.request = request;
  this.response = response;
  this.buffer = buffer;
};

function ipFromRequest(reqData) {
  return reqData.request.headers['x-forwarded-for'];
}

function rejectRequest(reqData) {
  reqData.response.writeHead(400);
  reqData.response.end();
}

var Queue = function (proxies, parameters) {
  this.proxies = proxies;
  this.parameters = parameters;
};

var reqlog = [];
var blacklist = [];

function currentlyBlacklisted(ip) {
  if (blacklist.indexOf(ip) !== -1) {
    return true;
  }

  var req = {ip: ip, time: new Date()};
  reqlog.push(req);

  var interval = 30 * 1000;
  var normal_traffic = 6;   // $n req/interval

  // Remove reqs from 5s ago.
  var oldest_time = new Date(req.time.getTime() - interval);
  var filtered_reqlog = reqlog.filter(function (r) {
    if (r.time < oldest_time) {
      return false;
    } else {
      return true;
    }
  });
  reqlog = filtered_reqlog;

  var total_requests = reqlog.length;

  if (total_requests < 20) {
    return false;
  }

  // Work out frequencies from the current buffer or requests.
  var iptocount = {};
  for (var idx in reqlog) {
    var r = reqlog[idx];
    if (!(r.ip in iptocount)) {
      iptocount[r.ip] = 1;
    } else {
      iptocount[r.ip] += 1;
    }
  }

  // If this IP has done more than 50% of all requests and the total number of
  // requests is over a minimum number then stop.
  var requests_for_this_ip = iptocount[ip];

  if (requests_for_this_ip > normal_traffic) {
    console.log('banned ' + ip);
    blacklist.push(ip);
    return true;
  }

  return false;
}

Queue.prototype.takeRequest = function (reqData) {
  // Reject traffic as necessary:
  if (currentlyBlacklisted(ipFromRequest(reqData))) {
    rejectRequest(reqData);
    return;
  }
  // Otherwise proxy it through:
  this.proxies[0].proxyRequest(reqData.request, reqData.response, reqData.buffer);
};
Queue.prototype.requestFinished = function () {
  return;
};

function checkBackends(targets, path, response) {
  var toCheck = targets.map(function (target) {
    var output = {};
    output['host'] = target['host'];
    output['port'] = target['port'];
    output['path'] = path;
    return output;
  });
  var success = function () {
    response.writeHead(200, {"Content-Type": "application/json"});
    response.end()
  };
  var error = function () {
    response.writeHead(500, {"Content-Type": "application/json"});
    response.end()
  };
  checkServer.checkServers(toCheck, success, error);
}

function main() {
  var opts = {
    "out-ports": String,
    "in-port": String,
  };
  var parsed = nopt(opts),
      inPort = parsed['in-port'] || '3000',
      outPorts = parsed['out-ports'] ? parsed['out-ports'].split(",") : ['3001'],
      targets = [],
      target,
      proxies = [],
      proxy,
      i;

  for (i = 0; i < outPorts.length; i++) {
    target = {'host': 'localhost', 'port': outPorts[i]};
    targets.push(target);
    proxy = new httpProxy.HttpProxy({'target': target});
    proxy.identifier = i;
    proxies.push(proxy);
  }

  var queue = new Queue(proxies, {});
  for (i = 0; i < proxies.length; i++) {
    proxy = proxies[i];
    proxy.on("end", queue.requestFinished);
  }

  var server = http.createServer(function (req, res) {
    if (req.method === "HEAD") {
      // HEAD requests are used to monitor the status of the simulation
      // proxies[0].proxyRequest(reqData.request, reqData.response, reqData.buffer);
      checkBackends(targets, url.parse(req.url)['pathname'], res);
    } else {
      var buffer = httpProxy.buffer(req);
      var reqData = new RequestData(req, res, buffer);
      queue.takeRequest(reqData);
    }
  });

  server.on('close', function () {
    for (i = 0; i < proxies.length; i++) {
      proxies[i].close();
    }
  });
  console.log("The shield is up and listening.");
  server.listen(inPort);
}

main();
